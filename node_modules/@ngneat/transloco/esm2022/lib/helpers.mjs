import { flatten as _flatten, unflatten as _unflatten } from 'flat';
export function getValue(obj, path) {
    if (!obj) {
        return obj;
    }
    /* For cases where the key is like: 'general.something.thing' */
    if (Object.prototype.hasOwnProperty.call(obj, path)) {
        return obj[path];
    }
    return path.split('.').reduce((p, c) => p?.[c], obj);
}
export function setValue(obj, prop, val) {
    obj = { ...obj };
    const split = prop.split('.');
    const lastIndex = split.length - 1;
    split.reduce((acc, part, index) => {
        if (index === lastIndex) {
            acc[part] = val;
        }
        else {
            acc[part] = Array.isArray(acc[part])
                ? acc[part].slice()
                : { ...acc[part] };
        }
        return acc && acc[part];
    }, obj);
    return obj;
}
export function size(collection) {
    if (!collection) {
        return 0;
    }
    if (Array.isArray(collection)) {
        return collection.length;
    }
    if (isObject(collection)) {
        return Object.keys(collection).length;
    }
    return collection ? collection.length : 0;
}
export function isEmpty(collection) {
    return size(collection) === 0;
}
export function isFunction(val) {
    return typeof val === 'function';
}
export function isString(val) {
    return typeof val === 'string';
}
export function isNumber(val) {
    return typeof val === 'number';
}
export function isObject(item) {
    return !!item && typeof item === 'object' && !Array.isArray(item);
}
export function coerceArray(value) {
    return Array.isArray(value) ? value : [value];
}
/*
 * @example
 *
 * given: path-to-happiness => pathToHappiness
 * given: path_to_happiness => pathToHappiness
 * given: path-to_happiness => pathToHappiness
 *
 */
export function toCamelCase(str) {
    return str
        .replace(/(?:^\w|[A-Z]|\b\w)/g, (word, index) => index == 0 ? word.toLowerCase() : word.toUpperCase())
        .replace(/\s+|_|-|\//g, '');
}
export function isBrowser() {
    return typeof window !== 'undefined';
}
export function isNil(value) {
    return value === null || value === undefined;
}
export function isDefined(value) {
    return isNil(value) === false;
}
export function toNumber(value) {
    if (isNumber(value))
        return value;
    if (isString(value) && !isNaN(Number(value) - parseFloat(value))) {
        return Number(value);
    }
    return null;
}
export function isScopeObject(item) {
    return item && typeof item.scope === 'string';
}
export function isScopeArray(item) {
    return Array.isArray(item) && item.every(isScopeObject);
}
export function hasInlineLoader(item) {
    return item && isObject(item.loader);
}
export function unflatten(obj) {
    return _unflatten(obj);
}
export function flatten(obj) {
    return _flatten(obj, { safe: true });
}
//# sourceMappingURL=data:application/json;base64,