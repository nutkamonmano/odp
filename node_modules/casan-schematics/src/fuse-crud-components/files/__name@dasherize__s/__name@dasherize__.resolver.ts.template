import { inject } from '@angular/core';
import {
    ActivatedRouteSnapshot,
    ResolveFn,
    Router,
    RouterStateSnapshot,
} from '@angular/router';
import { <%= classify(name) %>Service } from 'app/core/<%= dasherize(name) %>/<%= dasherize(name) %>.service';
import { <%= classify(name) %> } from 'app/core/<%= dasherize(name) %>/<%= dasherize(name) %>.type';
import { Get<%= classify(name) %>Parameter } from 'app/core/<%= dasherize(name) %>/parameters/get-<%= dasherize(name) %>.parameter';
import { DEF_LIMIT, Page, SortType } from 'app/core/base/page.type';
import { PageResponse } from 'app/core/base/pageResponse.types';
import { catchError, throwError } from 'rxjs';

export const <%= dasherize(name) %>ListsResolver: ResolveFn<PageResponse<<%= classify(name) %>[]>> = (
    route,
    state
) => {
    const currPage: Page = { page: 1, limit: DEF_LIMIT, sortBy: 'updatedAt', sortType: SortType.desc };
    const <%= dasherize(name) %>Service = inject(<%= classify(name) %>Service);
    const param = new Get<%= classify(name) %>Parameter();
    param.limit = currPage.limit;
    param.page = currPage.page;
    param.sortBy = currPage.sortBy;
    param.sortType = currPage.sortType;
    return <%= dasherize(name) %>Service.get<%= classify(name) %>Lists(param);
};

export const <%= dasherize(name) %>Resolver: ResolveFn<<%= classify(name) %>> = (
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
) => {
    const <%= dasherize(name) %>Service = inject(<%= classify(name) %>Service);
    const router = inject(Router);

    return <%= dasherize(name) %>Service.get<%= classify(name) %>ById(route.paramMap.get('id')).pipe(
        catchError((error) => {
            console.error(error);
            const parentUrl = state.url.split('/').slice(0, -1).join('/');
            router.navigateByUrl(parentUrl);
            return throwError(error);
        })
    );
};
