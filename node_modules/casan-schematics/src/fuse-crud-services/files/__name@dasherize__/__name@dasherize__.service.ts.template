import { HttpClient } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { map, Observable, BehaviorSubject, tap, of } from 'rxjs';
import { PageResponse } from '../base/pageResponse.types';
import { Response } from '../base/response.types';
import { SearchParameter } from '../base/parameters/searchParameter.entity';
import { <%= classify(name) %> } from './<%= dasherize(name) %>.type';
import { Create<%= classify(name) %>Dto } from './dto/create-<%= dasherize(name) %>.dto';
import { Update<%= classify(name) %>Dto } from './dto/update-<%= dasherize(name) %>.dto';

@Injectable({ providedIn: 'root' })
export class <%= classify(name) %>Service {
    private _base<%= classify(name) %>Url = '/api/<%= dasherize(name) %>s';

    readonly apiUrl = {
        <%= dasherize(name) %>Url: this._base<%= classify(name) %>Url,
        <%= dasherize(name) %>WithIdUrl: (id: string): string => `${this._base<%= classify(name) %>Url}/${id}`
    };

    private _httpClient = inject(HttpClient);
    private _<%= dasherize(name) %>Lists: BehaviorSubject<PageResponse<<%= classify(name) %>[]>> = new BehaviorSubject<PageResponse<<%= classify(name) %>[]>>(null);
    private _<%= dasherize(name) %>: BehaviorSubject<<%= classify(name) %>> = new BehaviorSubject<<%= classify(name) %>>(null);

    set <%= dasherize(name) %>Lists(value: PageResponse<<%= classify(name) %>[]>) {
        this._<%= dasherize(name) %>Lists.next(value);
    }

    set <%= dasherize(name) %>(value: <%= classify(name) %>) {
        this._<%= dasherize(name) %>.next(value);
    }


    get <%= dasherize(name) %>Lists$(): Observable<PageResponse<<%= classify(name) %>[]>> {
        return this._<%= dasherize(name) %>Lists.asObservable();
    }

    get <%= dasherize(name) %>$(): Observable<<%= classify(name) %>> {
        return this._<%= dasherize(name) %>.asObservable();
    }

    get<%= classify(name) %>Lists(param: SearchParameter): Observable<PageResponse<<%= classify(name) %>[]>> {
        let options = {
            params: param.toHttpParams()
        };
        return this._httpClient.get<PageResponse<<%= classify(name) %>[]>>(this.apiUrl.<%= dasherize(name) %>Url,options).pipe(
            tap((<%= dasherize(name) %>) => {
                this._<%= dasherize(name) %>Lists.next(<%= dasherize(name) %>);
            })
        );
    }

    get<%= classify(name) %>ById(id: string): Observable<<%= classify(name) %>> {
        return this._httpClient.get<Response<<%= classify(name) %>>>(this.apiUrl.<%= dasherize(name) %>WithIdUrl(id)).pipe(
            map((m: Response<<%= classify(name) %>>) => m.item),
            tap((<%= dasherize(name) %>) => {
                this._<%= dasherize(name) %>.next(<%= dasherize(name) %>);
            })
        );
    }

    create(body: Create<%= classify(name) %>Dto): Observable<any> {
        return this._httpClient.post(this.apiUrl.<%= dasherize(name) %>Url, body);
    }

    update(id: string, body: Update<%= classify(name) %>Dto): Observable<any> {
        return this._httpClient.put(this.apiUrl.<%= dasherize(name) %>WithIdUrl(id), body);
    }

    delete(id: string): Observable<any> {
        return this._httpClient.delete(this.apiUrl.<%= dasherize(name) %>WithIdUrl(id));
    }
}
