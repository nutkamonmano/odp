import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Create<%= classify(name) %>Command } from './create-<%= dasherize(name) %>.command';
import { <%= classify(name) %>RepositoryInterface } from '../../domain/repositories/<%= dasherize(name) %>.repository.interface';
import { BadRequestException, Inject } from '@nestjs/common';
import { <%= classify(name) %>Entity } from '../../domain/entities/<%= dasherize(name) %>.entity';
import { ResponseDto } from 'src/common/presentation/dtos/response.dto';

@CommandHandler(Create<%= classify(name) %>Command)
export class Create<%= classify(name) %>Handler
  implements ICommandHandler<Create<%= classify(name) %>Command>
{
  constructor(
    @Inject('<%= classify(name) %>Repository')
    private readonly <%= dasherize(name) %>Repository: <%= classify(name) %>RepositoryInterface,
  ) {}

  async execute(command: Create<%= classify(name) %>Command): Promise<ResponseDto<<%= classify(name) %>Entity>> {
    const { create<%= classify(name) %>Dto, createdBy } = command;
    const existing<%= classify(name) %> = await this.<%= dasherize(name) %>Repository.findByName(
      create<%= classify(name) %>Dto.name,
    );
    if (existing<%= classify(name) %>) {
      throw new BadRequestException('<%= classify(name) %> already exists');
    }
    const today = new Date();
    const <%= dasherize(name) %> = new <%= classify(name) %>Entity();
    Object.assign(<%= dasherize(name) %>, create<%= classify(name) %>Dto);
    <%= dasherize(name) %>.companyId = createdBy.companySelected;
    <%= dasherize(name) %>.createdBy = createdBy.id;
    <%= dasherize(name) %>.createdAt = today;
    const new<%= classify(name) %> = await this.<%= dasherize(name) %>Repository.save(<%= dasherize(name) %>);
    return new ResponseDto<<%= classify(name) %>Entity>(new<%= classify(name) %>);
  }
}
