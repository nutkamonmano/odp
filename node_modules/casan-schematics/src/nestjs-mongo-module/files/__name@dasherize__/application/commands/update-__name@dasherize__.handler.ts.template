import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Update<%= classify(name) %>Command } from './update-<%= dasherize(name) %>.command';
import { <%= classify(name) %>RepositoryInterface } from '../../domain/repositories/<%= dasherize(name) %>.repository.interface';
import { Inject, NotFoundException } from '@nestjs/common';
import { ResponseDto } from 'src/common/presentation/dtos/response.dto';
import { <%= classify(name) %>Entity } from 'src/<%= dasherize(name) %>/domain/entities/<%= dasherize(name) %>.entity';

@CommandHandler(Update<%= classify(name) %>Command)
export class Update<%= classify(name) %>Handler
  implements ICommandHandler<Update<%= classify(name) %>Command>
{
  constructor(
    @Inject('<%= classify(name) %>Repository')
    private readonly <%= dasherize(name) %>Repository: <%= classify(name) %>RepositoryInterface,
  ) {}

  async execute(command: Update<%= classify(name) %>Command): Promise<ResponseDto<<%= classify(name) %>Entity>> {
    const { id, update<%= classify(name) %>Dto, updatedBy  } = command;

    // หา <%= classify(name) %> จาก ID
    const <%= dasherize(name) %> = await this.<%= dasherize(name) %>Repository.findById(id);
    if (!<%= dasherize(name) %>) {
      throw new NotFoundException(`<%= classify(name) %> with ID ${id} not found`);
    }

    Object.assign(<%= dasherize(name) %>, update<%= classify(name) %>Dto);
    <%= dasherize(name) %>.updatedAt = new Date();
    <%= dasherize(name) %>.updatedBy = updatedBy.id;
    <%= dasherize(name) %>.companyId = updatedBy.companySelected;
    // อัปเดตข้อมูลในฐานข้อมูล
    const upd<%= classify(name) %> = await this.<%= dasherize(name) %>Repository.update(<%= dasherize(name) %>);
    return new ResponseDto<<%= classify(name) %>Entity>(upd<%= classify(name) %>);
  }
}
