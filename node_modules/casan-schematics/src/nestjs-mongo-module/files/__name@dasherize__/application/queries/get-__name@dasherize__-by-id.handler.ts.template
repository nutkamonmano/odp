import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';
import { Inject, NotFoundException } from '@nestjs/common';
import { ResponseDto } from 'src/common/presentation/dtos/response.dto';
import { Get<%= classify(name) %>ByIdQuery } from './get-<%= dasherize(name) %>-by-id.query';
import { <%= classify(name) %>RepositoryInterface } from '../../domain/repositories/<%= dasherize(name) %>.repository.interface';
import { <%= classify(name) %>Entity } from '../../domain/entities/<%= dasherize(name) %>.entity';

@QueryHandler(Get<%= classify(name) %>ByIdQuery)
export class Get<%= classify(name) %>ByIdHandler
  implements IQueryHandler<Get<%= classify(name) %>ByIdQuery>
{
  constructor(
    @Inject('<%= classify(name) %>Repository')
    private readonly <%= dasherize(name) %>Repository: <%= classify(name) %>RepositoryInterface,
  ) {}

  async execute(query: Get<%= classify(name) %>ByIdQuery): Promise<ResponseDto<<%= classify(name) %>Entity>> {
    const { id } = query;

    // ดึงข้อมูลผู้สมัครตาม ID
    const <%= dasherize(name) %> = await this.<%= dasherize(name) %>Repository.findById(id);
    if (!<%= dasherize(name) %>) {
      throw new NotFoundException(`<%= classify(name) %> with ID ${id} not found`);
    }

    return new ResponseDto<<%= classify(name) %>Entity>(<%= dasherize(name) %>);
  }
}
