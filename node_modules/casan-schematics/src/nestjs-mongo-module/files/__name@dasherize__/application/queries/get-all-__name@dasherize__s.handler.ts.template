import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';
import { GetAll<%= classify(name) %>sQuery } from './get-all-<%= dasherize(name) %>s.query';
import { <%= classify(name) %>RepositoryInterface } from '../../domain/repositories/<%= dasherize(name) %>.repository.interface';
import { Inject } from '@nestjs/common';
import { <%= classify(name) %>Entity } from '../../domain/entities/<%= dasherize(name) %>.entity';
import { PaginatedResponseDto } from 'src/common/presentation/dtos/paginated-response.dto';

@QueryHandler(GetAll<%= classify(name) %>sQuery)
export class GetAll<%= classify(name) %>sHandler
  implements IQueryHandler<GetAll<%= classify(name) %>sQuery>
{
  constructor(
    @Inject('<%= classify(name) %>Repository')
    private readonly <%= dasherize(name) %>Repository: <%= classify(name) %>RepositoryInterface,
  ) {}

  async execute(
    query: GetAll<%= classify(name) %>sQuery,
  ): Promise<PaginatedResponseDto<<%= classify(name) %>Entity>> {
    const { page, limit, sortBy, sortType, keyword, queryBy } = query;

    // คำนวณและดึงรายการผู้สมัครงานตาม page และ limit
    const <%= dasherize(name) %>s = await this.<%= dasherize(name) %>Repository.findAllPaginated(
      page,
      limit,
      sortBy,
      sortType,
      keyword,
      queryBy.companySelected,
    );

    // ดึงจำนวนรายการทั้งหมด
    const totalItems = <%= dasherize(name) %>s.totalCount;

    // ส่งข้อมูลแบบแบ่งหน้า
    return new PaginatedResponseDto(<%= dasherize(name) %>s.data, totalItems, limit, page);
  }
}
